[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "r\n\n\ntutorial\n\n\n\nBreve tutorial sobre las funciones m√°s interesantes para trabajar con factores en R.\n\n\n\nPaulo Villarroel\n\n\nOct 4, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nopensource\n\n\ntutorial\n\n\ngit\n\n\ngithub\n\n\n\nRevisemos c√≥mo contribuir a que crezca el conocimiento en el mundo!\n\n\n\nPaulo Villarroel\n\n\nOct 3, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\n\ncurso\n\n\n\nAprende desde cero el lenguaje de programaci√≥n m√°s usado y demandado del mundo.\n\n\n\nPaulo Villarroel\n\n\nOct 3, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nquarto\n\n\ntutorial\n\n\n\nAhora que ya tenemos nuestro blog arriba, toca personalizarlo y dejarlo m√°s lindo.\n\n\n\nPaulo Villarroel\n\n\nSep 19, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nquarto\n\n\ntutorial\n\n\n\nTe ense√±o a crear tu primer blog con Quarto, publicar nuevos art√≠culos, subirlo a GitHub y desplegarlo en la web.\n\n\n\nPaulo Villarroel\n\n\nSep 17, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Sobre m√≠",
    "section": "",
    "text": "Emprendedor y fundador de la √∫nica comunidad de innovaci√≥n abierta en salud p√∫blica de Chile (OpenSalud LAB). Adem√°s, soy creador y coordinador del curso de Data Science en salud en espa√±ol m√°s grande del mundo."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn‚Äôt specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/creando-mi-primer-blog/index.html",
    "href": "posts/creando-mi-primer-blog/index.html",
    "title": "Creando mi primer blog",
    "section": "",
    "text": "Este es el primer post de mi nuevo blog. Ac√° ir√© escribiendo sobre distintas tem√°ticas relacionadas al mundo de la programaci√≥n y la ciencia de datos.\nBienvenido/a nuevamente.\nEn esta oportunidad te voy a ense√±ar a crear tu propio blog, como el que est√°s viendo ahora. Si! Como este mismo. Te parece?\nPues vamos a ello!!\nLo primero que debes saber es que este blog est√° constru√≠do sobre la base Quarto. Quarto es una nueva plataforma open-source, lanzada hace poco tiempo, y que busca facilitar la publicaci√≥n de art√≠culos cient√≠ficos. La gracia que tiene es que soporta distintos lenguajes de programaci√≥n (R, Python, Julia) en una sola aplicaci√≥n.\nBueno, dentro de las cosas que permite hacer Quarto es crear un blog. Que es lo que haremos ahora.\n\n\nLo primero que tienes que hacer es descargar Quarto desde su web oficial. Elige la versi√≥n que corresponda a tu sistema operativo. La instalaci√≥n no tiene ninguna cosa extra√±a, es como cualquier programa nada m√°s.\n\n\n\n\n\nEn lo personal, estoy usando RStudio como editor de texto, pero se pueden usar otros como Visual Studio Code o Jupyter Notebooks. En este caso, explicar√© los pasos para RStudio.\n\n\n\nSi est√°s familiarizado con RStudio, sabr√°s lo que es un proyecto. Si no, pues un proyecto es un conjunto de archivos que se mantienen relacionados entre s√≠, de modo que sea m√°s simple el desarrollo y vinculaci√≥n. Adem√°s, de facilitar el uso de rutas relativas lo cual es genial a la hora de compartir c√≥digo o de proyectos m√°s grandes.\nEn RStudio debes ir al men√∫ superior y seleccionar New Project‚Ä¶\n\n\n\n\n\nEso te abrir√° una nueva pesta√±a, en donde debes seleccionar la opci√≥n New Directory.\n\n\n\n\n\nLuego, debes eligir el tipo de proyecto. En este caso, selecciona Quarto Blog.\n\n\n\n\n\nSe abrir√° una nueva ventana. Ac√° debes poner el nombre de la carpera que vas a crear (en Directory name). Verifica la carpeta en donde vas a crear este directorio. Luego dale a Create Project.\n\n\n\n\n\nCon eso, Quarto te crear√° una serie de archivos y la estructura del blog de forma autom√°tica!!!\nVer√°s que ahora tienes muchos archivos nuevos en tu visor.\n\n\n\n\n\n\n\n\nCon los pasos anteriores, Quarto te cre√≥ un blog completamente funcional. Eso si, con art√≠culos de muestra que despu√©s hay que eliminar o modificar, obviamente. Pero ya tienes la base.\nPara revisar c√≥mo se ve tu blog, debes darle clic al bot√≥n Render de la parte superior.\n\n\n\n\n\nVer√°s una serie de cosas que van a sair en la consola de RStudio, pero es parte del proceso de renderizado. O sea, para armar el blog y pasar los archivos a una p√°gina web.\nSi todo sale bien, se deber√≠a abrir tu blog en una pesta√±a de tu navegador."
  },
  {
    "objectID": "posts/creando-mi-primer-blog-con-quarto/index.html",
    "href": "posts/creando-mi-primer-blog-con-quarto/index.html",
    "title": "Creando mi primer blog con Quarto",
    "section": "",
    "text": "Hola!! ü§ò\nEste es el primer post de mi nuevo blog. Ac√° ir√© escribiendo sobre distintas tem√°ticas relacionadas al mundo de la programaci√≥n y la ciencia de datos.\nBienvenido/a nuevamente.\nEn esta oportunidad te voy a ense√±ar a crear tu propio blog, como el que est√°s viendo ahora. Si! Como este mismo. Te parece?\nPues vamos a ello!!\nLo primero que debes saber es que este blog est√° constru√≠do sobre la base Quarto. Quarto es una nueva plataforma open-source, lanzada hace poco tiempo, y que busca facilitar la publicaci√≥n de art√≠culos cient√≠ficos. La gracia que tiene es que soporta distintos lenguajes de programaci√≥n (R, Python, Julia) en una sola aplicaci√≥n.\nBueno, dentro de las cosas que permite hacer Quarto es crear un blog. Que es lo que haremos ahora."
  },
  {
    "objectID": "posts/personalizado-el-blog/index.html",
    "href": "posts/personalizado-el-blog/index.html",
    "title": "Personalizando el blog",
    "section": "",
    "text": "Ya tenemos nuestro blog!\nY ya que al subir este nuevo post, voy a cambiar la configuraci√≥n, te dejo esta imagen de la versi√≥n original del cual parto.\nAhora toca cambia algunas cosas para que el blog sea m√°s funcional y adecuado."
  },
  {
    "objectID": "posts/personalizado-el-blog/index.html#cambiando-el-t√≠tulo",
    "href": "posts/personalizado-el-blog/index.html#cambiando-el-t√≠tulo",
    "title": "Personalizando el blog",
    "section": "Cambiando el t√≠tulo",
    "text": "Cambiando el t√≠tulo\nEntre esas cosas, quiero cambiar el t√≠tulo del blog. Ahora dice ‚Äúmi_blog‚Äù, que es el nombre del archivo en donde tengo el proyecto completo y que al crear el blog con Quarto, toma este nombre (del archico) por defecto. Pero es feo y quiero cambiarlo por algo m√°s representativo.\nDentro de las carpetas y estructura que se crean por defecto, en la raiz del proyecto hay un archivo que se llama _quarto.yml. Este es un archivo YAML que contiene algunos datos de configuraci√≥n general del blog.\n\n\n\n\n\nSi te fijas, ah√≠ est√° el t√≠tulo del blog, el ‚Äúmi blog‚Äù que deseo cambiar.\nPues bueno, entonces habr√° que modificarlo. Voy a poner mi direcci√≥n web paulovillarroel.com que es un dominio que compr√© hace unos d√≠as y lo configur√© en mi cuenta de Netlify para linkearla a mi blog. Hacer eso es bastante simple. La web de Netlify es bien intuitiva.\nPues bueno‚Ä¶\nPara ver los cambios que voy realizando en el blog, sin necesidad de renderizar y desplegar nada (no es buena idea hacer todo es cada vez que se hacen cambios, pues la idea es hacerlo cuando cuando ya se tienen varios cambios finalizados y que comprobamos que funcionan y nos gustan). Para ello, lo que har√© es previsualizar la web.\nEso se hace del men√∫ superior de RStudio, en la pesta√±a de Build est√° la opci√≥n de Preview Website. Esto abrir√° una pesta√±a del navegador con el preview de lo que estamos haciendo.\n\n\n\n\n\nOk!! Vamos avanzando!! üéâ\nYa tenemos cambiado el nombre de la web, arriba a la izquierda. Y aparace una nueva entrada a blog que es este mismo art√≠culo que estoy escribiendo.\nPero sigue apareciendo ‚Äúmi_blog‚Äù como una especia de t√≠tulo.\nPara modificar esa secci√≥n, es necesario cambiar algunas cosas de la p√°gina que estamos visualizando. En la carpeta ra√≠z del proyecto, tenemos el archivo index.qmd. Si lo abrimos, nos encontramos con lo siguiente:\n\n\n\n\n\nVemos que tiene como t√≠tulo ‚Äúmi_blog‚Äù. Maravilloso!!!\nAhora procedemos a cambiarlo. En mi caso le he puesto simplemente Blog.\nHay varias opciones de configuraci√≥n aqu√≠, pero por ahora las dejaremos igual. Ya las retomar√© m√°s adelante.\nF√≠jate que si ya tienes la pesta√±a del navegador abierta (la que se abri√≥ al hacer clic en Preview) y la actualizas, se ver√°n reflejados los cambios (debes guardarlos antes eso si). Recuerda que este preview est√° solo en tu computador y no en la versi√≥n publicada en la web. Por eso la direcci√≥n sale localhost, que es tu pc."
  },
  {
    "objectID": "posts/personalizado-el-blog/index.html#cambiando-links",
    "href": "posts/personalizado-el-blog/index.html#cambiando-links",
    "title": "Personalizando el blog",
    "section": "Cambiando links",
    "text": "Cambiando links\nSi eres curioso/a, te habr√°s dado cuenta que los links de los √≠conos que salen arriba a la derecha te llevan a las web oficiales de GitHub y Twitter. Bueno, eso es algo que debemos cambiar, para poner los link a mis redes sociales respectivas.\nEn el archivo _quarto.yml que ya vimos antes, est√°n los link para modificarlos. Pongo mis links correctos y aprovecho de agregar mi perfil de LinkedIn.\nFinalmente, me queda as√≠‚Ä¶"
  },
  {
    "objectID": "posts/personalizado-el-blog/index.html#cambiando-el-tema",
    "href": "posts/personalizado-el-blog/index.html#cambiando-el-tema",
    "title": "Personalizando el blog",
    "section": "Cambiando el tema",
    "text": "Cambiando el tema\nEl tema por defecto del blog no est√° mal, pero me gustar√≠a probar otro.\nQuarto usa Bootstrap 5 y Boostwatch para los temas. Tiene 25 temas ya inlcu√≠dos por defecto, los cuales los puedes ver y revisar en la web de Quarto.\nEn mi caso usar√© el tema darkly, ya que me gustan los temas oscuros.\nPara cambiar el tema tan solo debes cambiar el nombre que aparece en theme en el YAML. Sin embargo, podemos hacer algo interesante ac√° y es agregar la opci√≥n de tener 2 temas, uno claro y otro oscuro para que sea el usuario quien pueda elegir cual le acomode m√°s. Para eso, en la secci√≥n themes debemos hacer lo siguiente:\n\n\n\n\n\nLa verdad, es que podr√≠amos cambiar muchas m√°s cosas del tema, incluso crear un tema propio. Para ello, tendr√≠amos que tocar el CSS, pero este es un tutorial para principiantes, as√≠ que no me voy a meter en esos temas por ahora. Pero cre√©me, conocer de HTML y CSS es algo muy √∫til. Te lo dejo ah√≠.\nNota que puse la versi√≥n dark arriba de la light, pues quiero que esa sea la por defecto al entrar a la web."
  },
  {
    "objectID": "posts/personalizado-el-blog/index.html#cambiando-el-layout",
    "href": "posts/personalizado-el-blog/index.html#cambiando-el-layout",
    "title": "Personalizando el blog",
    "section": "Cambiando el layout",
    "text": "Cambiando el layout\nHasta ahora, el blog se ve de esta forma:\n\n\n\n\n\nPero esa configuraci√≥n de c√≥mo se ven los art√≠culo no me termina de convencer.\nSi revisamos la web de Quarto, tenemos varias opciones para el layout:\n\ndefault\ngrid\ntable\n\nPara modificar esta configuraci√≥n, debemos hacerlo del archivo index.qmd de la raiz del proyecto. En la secci√≥n listing/type.\nDe las 3 opciones, me gusta m√°s la opci√≥n de grid. Con ello, el blog queda algo as√≠‚Ä¶"
  },
  {
    "objectID": "posts/personalizado-el-blog/index.html#agregando-comentarios",
    "href": "posts/personalizado-el-blog/index.html#agregando-comentarios",
    "title": "Personalizando el blog",
    "section": "Agregando comentarios",
    "text": "Agregando comentarios\nUna de las cosas interesantes de un blog es la interacci√≥n con los visitantes. Y una de las opciones interesantes que te ofrece Quarto es agregar la posibilidad de que las personas puedan escribir comentarios en los art√≠culos.\nEn la web de Quarto puedes leer m√°s detalles de esta implementaci√≥n.\nEn este caso, yo usar√© Giscus, que se basa en los comentarios de GitHub. Aprovecharemos la instancia que ya tenemos nustro blog en Github para usar esta funcionalidad.\nOk, vamos con esto‚Ä¶\n\nTenemos que ir a la web de Giscus y darle al bot√≥n install.\n\n\n\n\n\n\n\nDebemos elegir el repositorio de GitHub al cual haremos referencia, en este caso, el que creamos en el art√≠culo anterior.\n\n\n\n\n\n\n\nLe damos a Install.\nEs posible que GitHub te pida algunos permisos o verificaciones.\nDebes asegurarte que tienes las discusiones habilitadas en tu repositorio. Si no has cambiado nada, por defecto la debes tener desactivadas. Para activarlas, tienes que ir a tu repositorio del blog e ir a Settings.\n\n\n\n\n\n\n\nEn la secci√≥n de configuraci√≥n (settings) baja un poco en la p√°gina. Encontrar√°s una secci√≥n llamada Features. Marca la opci√≥n de Discussions.\n\n\n\n\n\n\n\nAnda al archivo _quarto.yml y agrega este c√≥digo:\n\n\ncomments:\n  giscus:\n    repo: YOURGITHUBACCOUNT/YOURREPO\nL√≥gicamente, en donde dice repo debes poner la direcci√≥n web de tu repositorio de GitHub en donde tienes el proyecto.\nEn mi caso, queda as√≠:\n\n\n\n\n\n\nPor defecto, al agregar esta ll√≠nea de c√≥digo se pondr√° en cada p√°gina de la web la opci√≥n de discusiones. En mi caso, solo quiero √©sto para los art√≠culos, pero no para la parte en donde muestro todos los art√≠culos y otras partes como el about (que no lo hemos tocado hasta ahora, por cierto).\nPara evitar √©sto, debemos incluir en el YAML de los .qmd respectivos el siguiente c√≥digo:\n\n\ncomments: false"
  },
  {
    "objectID": "posts/personalizado-el-blog/index.html#algunos-toques-finales",
    "href": "posts/personalizado-el-blog/index.html#algunos-toques-finales",
    "title": "Personalizando el blog",
    "section": "Algunos toques finales",
    "text": "Algunos toques finales\nPara darle algunos toques finales a la personalizaci√≥n del blog, te dejo como dej√© mi archivo _quarto.yml\nproject:\n  type: website\n\nwebsite:\n  title: \"PauloVillarroel.com\"\n  site-url: \"https://www.paulovillarroel.com/\"\n  google-analytics: \"G-RNWVZS7ZL8\"\n  navbar:\n    right:\n      - about.qmd\n      - icon: github\n        href: https://github.com/paulovillarroel\n      - icon: twitter\n        href: https://twitter.com/Chazkon\n      - icon: linkedin\n        href: https://www.linkedin.com/in/paulovillarroeltapia/\nformat:\n  html:\n    smooth-scroll: true\n    theme:\n      dark: darkly\n      light: flatly\n    css: styles.css\n    link-external-newwindow: true\n\neditor: visual\n\ncomments:\n  giscus:\n    repo: paulovillarroel/mi_blog\nOk\nYa estamos terminando este art√≠culo. Espero que te haya sido √∫til.\nA√∫n faltan cosas por configurar y personalizar, pero hemos avanzado bastante por ahora.\nNos vemos!! üöÄ"
  },
  {
    "objectID": "posts/creando-mi-primer-blog-con-quarto/index.html#paso-1-descargar-quarto",
    "href": "posts/creando-mi-primer-blog-con-quarto/index.html#paso-1-descargar-quarto",
    "title": "Creando mi primer blog con Quarto",
    "section": "Paso 1: Descargar Quarto",
    "text": "Paso 1: Descargar Quarto\nLo primero que tienes que hacer es descargar Quarto desde su web oficial. Elige la versi√≥n que corresponda a tu sistema operativo. La instalaci√≥n no tiene ninguna cosa extra√±a, es como cualquier programa nada m√°s.\n\n\n\n\n\nEn lo personal, estoy usando RStudio como editor de texto, pero se pueden usar otros como Visual Studio Code o Jupyter Notebooks. En este caso, explicar√© los pasos para RStudio."
  },
  {
    "objectID": "posts/creando-mi-primer-blog-con-quarto/index.html#paso-2-crea-un-proyecto",
    "href": "posts/creando-mi-primer-blog-con-quarto/index.html#paso-2-crea-un-proyecto",
    "title": "Creando mi primer blog con Quarto",
    "section": "Paso 2: Crea un proyecto",
    "text": "Paso 2: Crea un proyecto\nSi est√°s familiarizado con RStudio, sabr√°s lo que es un proyecto. Si no, pues un proyecto es un conjunto de archivos que se mantienen relacionados entre s√≠, de modo que sea m√°s simple el desarrollo y vinculaci√≥n. Adem√°s, de facilitar el uso de rutas relativas lo cual es genial a la hora de compartir c√≥digo o de proyectos m√°s grandes.\nEn RStudio debes ir al men√∫ superior y seleccionar New Project‚Ä¶\n\n\n\n\n\nEso te abrir√° una nueva pesta√±a, en donde debes seleccionar la opci√≥n New Directory.\n\n\n\n\n\nLuego, debes eligir el tipo de proyecto. En este caso, selecciona Quarto Blog.\n\n\n\n\n\nSe abrir√° una nueva ventana. Ac√° debes poner el nombre de la carpera que vas a crear (en Directory name). Verifica la carpeta en donde vas a crear este directorio. Luego dale a Create Project.\n\n\n\n\n\nCon eso, Quarto te crear√° una serie de archivos y la estructura del blog de forma autom√°tica!!!\nVer√°s que ahora tienes muchos archivos nuevos en tu visor."
  },
  {
    "objectID": "posts/creando-mi-primer-blog-con-quarto/index.html#paso-3-preview-de-tu-blog",
    "href": "posts/creando-mi-primer-blog-con-quarto/index.html#paso-3-preview-de-tu-blog",
    "title": "Creando mi primer blog con Quarto",
    "section": "Paso 3: Preview de tu blog",
    "text": "Paso 3: Preview de tu blog\nCon los pasos anteriores, Quarto te cre√≥ un blog completamente funcional. Eso si, con art√≠culos de muestra que despu√©s hay que eliminar o modificar, obviamente. Pero ya tienes la base.\nPara revisar c√≥mo se ve tu blog, debes darle clic al bot√≥n Render de la parte superior.\n\n\n\n\n\nVer√°s una serie de cosas que van a sair en la consola de RStudio, pero es parte del proceso de renderizado. O sea, para armar el blog y pasar los archivos a una p√°gina web.\nSi todo sale bien, se deber√≠a abrir tu blog en una pesta√±a de tu navegador.\nY listo!!!\nYa tienes tu primer blog üéâ\nEs posible que tu blog se muestra en el mismo RStudio en una ventana lateral. Esa opci√≥n me parece que viene por defecto (no recuerdo bien), pero yo la tengo configurada para que me aparezca el preview en una ventana del navegador. Me gusta m√°s esa opci√≥n, pues se ve mejor el contenido. Para poner esa opci√≥n, debes darle clic a la tuerca que est√° al lado derecho del bot√≥n Render y seleccionar Preview in Window.\n\nF√≠jate que la web est√° en tu computador y se est√° mosrando desde una direcci√≥n que dice localhost. Esto es por ese mismo motivo. A pesar de que se ve como una web a trav√©s de tu navegador, el blog solo est√° en tu computador. No est√° subido a internet ni alojado en ning√∫n servicio que permita que otros lo vean. Para eso, hay que hacer algunas cosas, que las veremos un poco m√°s adelante."
  },
  {
    "objectID": "posts/creando-mi-primer-blog-con-quarto/index.html#paso-4-crear-un-post",
    "href": "posts/creando-mi-primer-blog-con-quarto/index.html#paso-4-crear-un-post",
    "title": "Creando mi primer blog con Quarto",
    "section": "Paso 4: Crear un post",
    "text": "Paso 4: Crear un post\nCuando creas tu proyecto de blog con Quarto, la aplicaci√≥n crea la estructura y pone 2 post de ejemplo.\nSi observas los archivos, ver√°s una carpeta llamada posts. En esta carpeta es donde se deben ir guardando los archivos para los nuevos posts.\nPor defecto te crea 2 carpetas: welcome y post-with-code\nEsos son post de muestra, que los puedes eliminar. Pero antes que lo hagas, quiero que te fijes en c√≥mo estan estructurados. Esa ser√° la forma en que deber√°s crear tu pr√≥ximas entradas.\nCada art√≠culo (o post) consiste en una carpeta. Dentro de ella hay un archivo index.qmd y algunas im√°genes.\nEsta es la estructura de archivos que se te crear√° de forma autom√°tica:\n\nCreated _quarto.yml\nCreated index.qmd}\nCreated posts/welcome/index.qmd\nCreated posts/post-with-code/index.qmd\nCreated about.qmd\nCreated styles.css\nCreated posts/_metadata.yml\n\nEn la carpeta posts crea un nuevo archivo con el nombre de tu nueva entrada. Dentro de esa carpeta, crea un archivo .qmd y ll√°malo index. Es decir, te deber√≠a quedar un archivo de nombre index.qmd\nEsto es fundamental. Siempre usa index para nombrar a los nuevos posts. De lo contrario, Quarto no encontrar√° el archivo al cual hacer referencia para renderizar adecuadamente la web.\nSi ya est√°s familiarizado/a con R Markdown, notar√°s que trabajar con Quarto es muy similar. De hecho, los archivos .qmd tienen la misma estructura. Un encabezado (YAML) con algunas cinfiguraciones generales y luego el espacio para escribir texto.\nPara este post, us√© este YAML:\n\n\n\n\n\nEn art√≠culos posteriores veremos c√≥mo configurar el YAML, pues tiene muchas opciones.\nAhora que ya tienes creada una nueva carpeta dentro de posts y agregaste el index.qmd, b√°sicamente ya tienes un nuevo art√≠culo listo para el blog.\nGuarda todos los cambios y dale a Render nuevamente. Si ya ten√≠as abierto el blog en tu navegador, deber√≠an verse reflejados los cambios realizados. Si no pasa eso, actualiza la p√°gina para ver los cambios.\nAs√≠ se ve mi blog, solo con 1 art√≠culo publicado (que es este)."
  },
  {
    "objectID": "posts/creando-mi-primer-blog-con-quarto/index.html#paso-5-subiendo-el-blog-a-github",
    "href": "posts/creando-mi-primer-blog-con-quarto/index.html#paso-5-subiendo-el-blog-a-github",
    "title": "Creando mi primer blog con Quarto",
    "section": "Paso 5: Subiendo el blog a GitHub",
    "text": "Paso 5: Subiendo el blog a GitHub\nMe encanta el open-source y el compartir c√≥digo. Y una de las mejores formas de dejarlo publicado en GitHub.\nPara hacerlo, desde RStudio es bastante simple. Ah! Debes tener una cuenta ya creada en GitHub y tener GIT instalado.\nTeniendo lo anterior ya realizado, podemos usar la librer√≠a {usethis} para simplificar el proceso. Ac√° puedes ver la documentaci√≥n oficial.\nPrimero, instalamos la librer√≠a:\ninstall.packages(\"usethis\")\nConfiguramos nuestras credenciales (los datos que usamos para la cuenta de GitHub):\nusethis::use_git_config(\n   # your name\n   user.name = \"Mi nombre\",\n   # your email used in your GitHub account\n   user.email = \"micorreo@gmail.com\"\n )\nCreamos nuestro GitHub PAT Token con usethis::create_github_token() (es como una contrase√±a, pero m√°s segura). Cuando ejecutas este comando, se te abrir√° una pesta√±a de tu navegador. Tendr√°s que verificar algunos permisos a GitHub. Luego, en la configuraci√≥n del token, cambia el nombre, ajustael tiempo de expiraci√≥n y el resto d√©jalo como est√°. Crea el token.\nSe te mostrar√° una nueva p√°gina con tu claves.\nPara guardar tu nuevo token, usa gitcreds::gitcreds_set(). En la consola se te mostrar√° un men√∫. Selecciona la opci√≥n 2 Replace these credentials. Luego copia el token de GitHub, actualiza y guarda tus credenciales.\nReinicia la sesi√≥n de RStudio para que se hagan efectivos los cambios. Usualmente puedes usar CTRL + SHIFT + F10 o del men√∫ de arriba selecciona la pesta√±a de Session y luego Restart R.\nUsa usethis::git_sitrep() para verificar si tus credenciales como nombre, email y PAT est√°n correctamente configuradas.\nF√≠jate que salga este texto Personal access token for 'https://github.com': '<discovered>'\nCon eso ya deber√≠amos estar listos con la configuraci√≥n de GIT y GitHub.\nAhora configuremos algunas cosas m√°s‚Ä¶\nUsaremos use_git() para iniciar el control de versiones de GIT en nuestro proyecto.\nusethis::use_git()\n‚úî Setting active project to '/Users/Desktop/name-of-your-blog/'\n‚úî Initialising Git repo\n‚úî Adding '.Rproj.user', '.Rhistory', '.Rdata', '.httr-oauth', '.DS_Store' to '.gitignore'\nThere are 8 uncommitted files:\n* '_quarto.yml'\n* '.gitignore'\n* 'about.qmd'\n* 'example-quarto-blog.Rproj'\n* 'index.qmd'\n* 'posts/'\n* 'profile.jpg'\n* 'styles.css'\n\n\nIs it ok to commit them?\n\n1: Not now\n2: Yup\n3: Negative\n\nSelection: 2\n\n\n‚úî Adding files\n‚úî Making a commit with message 'Initial commit'\n‚Ä¢ A restart of RStudio is required to activate the Git pane\nRestart now?\n\n1: No way\n2: Definitely\n3: No\n\nSelection: 2\nAhora, usaremos use_github() para crear un repositorio en GitHub y subir el proyecto.\nusethis::use_github()\nSi todo ha salido bien, se deber√≠a abrir tu navegador con el nuevo repositorio de GitHub.\nAc√° puedes ver el repositorio de este proyecto."
  },
  {
    "objectID": "posts/creando-mi-primer-blog-con-quarto/index.html#paso-6-desplegar-con-netlify",
    "href": "posts/creando-mi-primer-blog-con-quarto/index.html#paso-6-desplegar-con-netlify",
    "title": "Creando mi primer blog con Quarto",
    "section": "Paso 6: Desplegar con Netlify",
    "text": "Paso 6: Desplegar con Netlify\nAhora vamos a publicar nuestro blog en internet para que otros lo puedan ver. Recuerda que hasta ahora, sigue estando solo en tu computador.\nPara hacer el deploy (despliegue) usaremos Netlify.\nEste es un servicio que har√° que el blog est√© disponible en una direcci√≥n web. Adem√°s, entre otras funciones super interesantes, tiene la opci√≥n de conectarlo a un repositorio de GitHub, que es lo que haremos en este caso.\nUsaremos esta opci√≥n, ya que nos ayudar√° a ser m√°s transparentes en todo el flujo de trabajo y podremos desplegar los cambios que vayamos realizando en nuestro proyecto y repo de GitHub.\nPara eso, primero deber crearte una cuenta en Netlify. Mi recomendaci√≥n es que lo hagas usando tu cuenta de GitHub.\nUna vez iniciada sesi√≥n, se te mostrar√° algo as√≠:\n\n\n\n\n\nEn la secci√≥n Sites, dale clic a Import from Git.\nSelecciona GitHub.\n\n\n\n\n\nSe comenzar√° a sincronzar con tu perfil de GitHub y te mostrar√° todos los respositorio disponibles.\nElige el que acabamos de crear, donde est√° nuestro blog.\nSe mostrar√° algunos detalles. Ac√° debes ingresar en Base directory _site, como se muestra en la imagen.\nEste paso es importante, de lo contrario no funcionar√° tu web.\n\n\n\n\n\nDale al bot√≥n Deploy site.\nTe va a salir algo como esto‚Ä¶\n\n\n\n\n\nSi no cambia el estado y sigue saliendo el mensaje Site deply in progress, puedes actualizar la p√°gina de tu navegador. Habitualmente este proceso es r√°pido y solo toma unos segundos.\n\n\n\n\n\nSi todo anda bien, deber√≠a estar ya desplegado nuestro blog.\nPara acceder a √©l, anda al link que te ponen (xxxx.netlify.app).\nEsta es una direcci√≥n web con un nombre aleatorio que te da Netlify. La podemos cambiar en la configuraci√≥n por algo que nos haga m√°s sentido. E incluso, podemos usar nustro propio dominio si es que lo tenemos.\nSe abrir√° una pesta√±a en tu navegador, mostrando tu blog!!! üòç\n\n\n\n\n\nEn Netlify, en la secci√≥n de Site settings podemos encontrar la opci√≥n para cambiar la direcci√≥n web.\nPara ello, debemos dar clic en Change site name.\n\n\n\n\n\nSe te abrir√° una ventana. Ingresa el nombre que desees y listo.\nCambiado el nombre. Nota que este cambio de nombre cambia la direcci√≥n web, por lo que si has compartido el link previo, este ya no funcionar√°. Ten cuidado con cambiar el nombre a cada rato.\nEspero que este tutorial te haya servido y que puedas tener tu propio blog.\nEn pr√≥ximas entradas, estar√© revisando c√≥mo hacer ajustes al blog, personalizar algunas cosas est√©ticas y agregarle algunas funcionaidades.\nNos vemos! üòú\n\n\nüëâ Revisa la segunda parte de este tutorial en este enlace."
  },
  {
    "objectID": "posts/contribuye-al-codigo-abierto/index.html",
    "href": "posts/contribuye-al-codigo-abierto/index.html",
    "title": "Contribuye al c√≥digo abierto",
    "section": "",
    "text": "Hola (otra vez!!)\nHoy te quiero hablar de un tema, que considero, muy relevante: el c√≥digo abierto.\nEn ingl√©s al c√≥digo abierto se le denomina open source. Y es que m√°s que una forma de desarrollar c√≥digo de forma colaborativa, es una filosof√≠a o un movimiento. Es una l√≥gica que supera solo a la producci√≥n del software mismo, sino que abarca valores del dise√±o descentralizado y soluci√≥n de problemas de forma colectiva y abierta. Si deseas saber un poco m√°s del open source, puedes revisar este link.\nEn lo personal, me encanta esta filosof√≠a del open source. Y es que esta forma de trabajo puede abarcar no solo el desarrollo de c√≥digo, sino que de otras industrias y √°reas. La innovaci√≥n tiene mucho de √©sto, de desarrollar soluciones de forma colaborativa y abierta.\nHoy quiero que tu puedas contribuir al c√≥digo abierto. Si!! Que ayudes a generar conocimiento colectivo. Entonces debes conocer un par de cosas. Una de √©stas es el control de versiones GIT y la otra es alguna plataforma de repositorios remotos , como GitHub, GitLab o Bitbucket.\nPero cuando me puse a pensar en c√≥mo explicarte a contribuir al c√≥digo abierto, me parece relevante explicarte un paso antes. Y es que para que puedas hacer estas cosas, debes conocer algo de GIT."
  },
  {
    "objectID": "posts/contribuye-al-codigo-abierto/index.html#qu√©-es-git",
    "href": "posts/contribuye-al-codigo-abierto/index.html#qu√©-es-git",
    "title": "Contribuye al c√≥digo abierto",
    "section": "¬øQu√© es GIT?",
    "text": "¬øQu√© es GIT?\nEn la web de Microsoft indican:\nGit es un sistema de control de versiones distribuido, lo que significa que un clon local del proyecto es un repositorio de control de versiones completo. Estos repositorios locales plenamente funcionales permiten trabajar sin conexi√≥n o de forma remota con facilidad. Los desarrolladores confirman su trabajo localmente y, a continuaci√≥n, sincronizan su copia del repositorio con la copia en el servidor. Este paradigma es distinto del control de versiones centralizado, donde los clientes deben sincronizar el c√≥digo con un servidor antes de crear nuevas versiones.\nYa te contar√© m√°s sobre GIT en otros art√≠culos. En esta oportunidad ser√© muy concreto. Te explicar√© c√≥mo instalar GIT en tu computador para que puedas empezar a contribuir a proyectos de c√≥digo abierto lo antes posible."
  },
  {
    "objectID": "posts/contribuye-al-codigo-abierto/index.html#pasos-para-instalar-git",
    "href": "posts/contribuye-al-codigo-abierto/index.html#pasos-para-instalar-git",
    "title": "Contribuye al c√≥digo abierto",
    "section": "Pasos para instalar GIT",
    "text": "Pasos para instalar GIT\nInstalar GIT no es nada complejo. Es como cualquier programa que instalas. B√°sicamente es descargar el instalador y darle clic a ‚Äúsiguiente‚Äù muchas veces.\nDe todas formas, hace unos meses me toc√≥ instalar GIT y tom√© capturas de pantalla de cada paso. Te las dejo para que te sirvan de referencia.\n\n\n\nVersi√≥n de GIT Puede que la versi√≥n que instales no sea la misma que muestro ac√°, pero la instalaci√≥n no deber√≠a ser muy distinta."
  },
  {
    "objectID": "posts/contribuye-al-codigo-abierto/index.html#finalmente",
    "href": "posts/contribuye-al-codigo-abierto/index.html#finalmente",
    "title": "Contribuye al c√≥digo abierto",
    "section": "Finalmente‚Ä¶",
    "text": "Finalmente‚Ä¶\nSi sigues los pasos, no deber√≠as tener mayor dificultades para tener instalado GIT.\nEso es lo primero para empezar a contribuir al open source.\nEn el pr√≥ximo art√≠culo te explicar√© de forma muy precisa, c√≥mo hacer tu primera pull request, que es la forma por excelencia de contribuir a proyectos abiertos. Pero eso, lo veremos en detalle en mi pr√≥ximo art√≠culo.\nNos vemos!!! üòÅ"
  },
  {
    "objectID": "posts/ruta-aprendizaje-python/index.html",
    "href": "posts/ruta-aprendizaje-python/index.html",
    "title": "Mi ruta de aprendizaje en Python",
    "section": "",
    "text": "Hola!\nTe quiero contar que, desde hace varias semanas, que estoy estudiando Python. Este ser√≠a mi tercer lenguaje de programaci√≥n, luego de R y SQL.\nYo me dedico, principalmente, al an√°lisis de datos y aplicaciones de inteligencia artificial, por lo cual este stack de tecnolog√≠a me parece bastante potente.\nA continuaci√≥n te explico porqu√© decid√≠ aprender Python y hacerlo de esta forma."
  },
  {
    "objectID": "posts/ruta-aprendizaje-python/index.html#por-qu√©-aprender-python",
    "href": "posts/ruta-aprendizaje-python/index.html#por-qu√©-aprender-python",
    "title": "Mi ruta de aprendizaje en Python",
    "section": "¬øPor qu√© aprender Python?",
    "text": "¬øPor qu√© aprender Python?\nPython es el lenguaje de programaci√≥n ‚Äúm√°s famoso‚Äù en la actualidad a nivel mundial. Bueno, si no es el primero, est√° entre los 3 primeros seguro, va a depender de la encuesta que se mire (tiene una lucha a muerte con JavaScript jajaj). Pero es innegable que este lenguaje es ampliamente buscado y las ofertas laborales son cada vez m√°s necesitadas, en especial, en temas de an√°lisis de datos, inteligencia artificial, IoT y backend.\nSi miramos Google Trends, podemos ver que el inter√©s por este lenguaje de programaci√≥n ha ido creciendo, en especial, desde el 2015 en adelante.\n\n\nPosiblemente eso tenga relaci√≥n con el auge de la inteligencia artificial, en donde Python es uno de los lenguajes m√°s usados.\nPor otra parte, si revisamos el TIOBE Index para el mes de septiembre 2022, vemos que Python se posiciona en el primer puesto del ranking, con tendencia al alza respecto del mes pasado.\n\n\n\n\n\nEn la encuesta 2022 de desarrolladores que hace StackOverflow, nuevamente vemos a Python entre los primeros lugares de los lenguajes m√°s usados.\n\n\n\n\n\nA ver, que un lenguaje sea el m√°s buscado, m√°s famoso y esas cosas no es tan importante. La verdad que lo que deber√≠a ser determinante es la utilidad que te ofrece aprenderlo. En mi caso, me sirve üòé, pues para temas de an√°lisis de datos es uno de los m√°s relevantes en la actualidad."
  },
  {
    "objectID": "posts/ruta-aprendizaje-python/index.html#por-qu√©-hacer-una-web",
    "href": "posts/ruta-aprendizaje-python/index.html#por-qu√©-hacer-una-web",
    "title": "Mi ruta de aprendizaje en Python",
    "section": "¬øPor qu√© hacer una web?",
    "text": "¬øPor qu√© hacer una web?\nEn aprendiendopython.com estoy documentando gran parte de lo que voy estudiando sobre Python.\nDecid√≠ hacer eso por varios motivos‚Ä¶\n\nMe gusta ense√±ar y me parece que puedo contribuir en ese sentido.\nLa mejor forma de estudiar y aprender algo, es ense√±√°ndolo. Al explic√°rselo a otras personas, el aprendizaje es mucho m√°s significativo y la curva es mucho m√°s r√°pida. Esta es una metodolog√≠a que uso bastante.\nA pesar de que estoy reci√©n aprendiendo Python, ya tengo conocimientos en programaci√≥n (soy programador desde hace un par de a√±os), lo cual hace que aprender un nuevo lenguaje sea mucho m√°s simple. Sin embargo, en este proyecto decid√≠ obviar un poco mis conocimientos previos e intentar explicar todo desde los m√°s simple y b√°sico, de modo que cualquiera pueda entenderlo. O, al menos, esa es mi intenci√≥n.\nIr documentando mi aprendizaje me ayuda a ir dejando un manual de estudio y notas para el futuro. En general, uno se puede aprender gran parte de las cosas de memoria y entender la l√≥gica, pero la sintaxis puede que se olvide. El contar con este material de apoyo me permitir√° tener acceso simple a esas cosas si es que lo llegara a necesitar."
  },
  {
    "objectID": "posts/ruta-aprendizaje-python/index.html#basado-en-proyectos",
    "href": "posts/ruta-aprendizaje-python/index.html#basado-en-proyectos",
    "title": "Mi ruta de aprendizaje en Python",
    "section": "Basado en proyectos",
    "text": "Basado en proyectos\nAdem√°s de ense√±ar lo que se va aprendiendo, otra forma de ir consolidando de mejor forma los conocimientos, es el realizar proyectos.\nLlevar a la pr√°ctica distintas cosas, en proyectos peque√±os, pero que permitan entender el funcionamiento del lenguaje.\nYa hice uno y lo tengo publicado. Es un peque√±o script para identificar el signo del zodiaco chino que te corresponde, seg√∫n el a√±o de nacimiento.\nyear = int(input(\"Ingresa el a√±o de nacimiento: \"))\n\ndef chinese_zodiac(year:int):\n    elements = (\"madera\", \"fuego\", \"tierra\", \"metal\", \"agua\")\n    animals = (\"rata\", \"buey\", \"tigre\", \"conejo\", \"drag√≥n\", \"serpiente\", \"caballo\", \"oveja\", \"mono\", \"gallo\", \"perro\", \"cerdo\")\n\n    if year < 604:\n        print(\"El ciclo sexagenario chino comenz√≥ en el a√±o 604. Debes introducir un a√±o adecuado.\")\n    else:\n        sexagenary_year = (year - 4) % 60\n        element = elements[int((sexagenary_year % 10) / 2)]\n        animal = animals[int(sexagenary_year % 12)]\n\n        print(f\"A√±o: {year} / Zodiaco: {animal} de {element}\")\n\nchinese_zodiac(year)"
  },
  {
    "objectID": "posts/ruta-aprendizaje-python/index.html#pero-est√°-lleno-de-otros-cursos",
    "href": "posts/ruta-aprendizaje-python/index.html#pero-est√°-lleno-de-otros-cursos",
    "title": "Mi ruta de aprendizaje en Python",
    "section": "Pero est√° lleno de otros cursos‚Ä¶",
    "text": "Pero est√° lleno de otros cursos‚Ä¶\nEfectivamente. Python, al ser uno de los lenguajes m√°s famosos, est√° lleno de tutoriales, cursos, videos en YouTube y libros, tanto de pago como, en su mayor√≠a, gratuitos. Adem√°s, la documentaci√≥n oficial de Python es bastante buena.\nEntonces, ¬øQu√© aporta aprendiendopython a la comunidad?\nPrimero. Yo no lo llamar√≠a un curso. Porque no est√° dise√±ado para ser eso. Como te mencionaba antes, lo que estoy documentando es mi ruta de aprendizaje, no estoy haciendo un curso. Pero, a pesar de eso, puede cumplir esa funci√≥n, principalmente, pues me he dedicado bastante a explicar los conceptos, dar muchos ejemplos y no dar cosas por obvias. Me parece que muchos cursos fallan en eso. Explican cosas muy por encima y no se detienen a explicarlas de forma clara.\nPor otro lado, el ritmo no es muy r√°pido. No es como esos cursos que te prometen que en 4 horas aprendes a programar y puedes tener el trabajo de tus sue√±os. Eso es mucha fantas√≠a y te venden algo que no es as√≠. Como todo en la vida, si quieres lograr las metas, debes dedicarle mucho tiempo, ser perseverante y seguir adelante, a√∫n cuando las cosas no te salgan. Como ac√° estoy documentando mis estudios, puede que le dedique m√°s tiempo a algunos temas que a otros, o que sea repetitivo en varias ocasiones.\nSin embargo, esto es j√∫stamente lo que lo hace diferente y especial. Pues yo tambi√©n lo estoy estudiando, por lo que esa expereincia de estudio y descubrimiento es muy valiosa, cosa que no ocurre en cursos o libros, donde todo est√° maqueteado. Ac√° te comento cosas que me funcionan y las que no, te hablo desde mi experiencia. Esto lo hace una forma muy especial de aprender. Es como ir al cine a ver una pel√≠culay comentar con un amigo mas mejores escenas, fallas y opiniones. Esa es una experiencia mucho m√°s entretenida que solo ir al cine. Bueno, ac√° es lo mismo.\nOk.\nTe dejo cordialmente invtada/o a seguir el aprendizaje de Python conmigo.\nüëâ Recuerda visitar aprendiendopython.com\nNos vemos!!"
  },
  {
    "objectID": "posts/factores-en-r/index.html",
    "href": "posts/factores-en-r/index.html",
    "title": "Factores en R",
    "section": "",
    "text": "Hola!!\nHoy toca ver c√≥digo. Yeahhh!!! üòÅ\nEn mi experiencia, uno de los aspectos m√°s relvantes a la hora de trabajar con datos, es saber manejar los datos categ√≥ricos o factores.\nEn la vida nos topamos a cada instante con este tipo de datos. Cuando vamos al supermercado, compramos frutas, l√°cteos, verduras y carnes. O cuando revisamos planillas de personas, vemos distintos tipos de profesiones. Si revisamos datos por pa√≠ses, finalmente √©stos son categor√≠as. Las categor√≠as est√°n por todos lados.\nPor otro lado, el conocimiento de factores es un plus muy potente para analizar datos y realizar la exploraci√≥n de los mismos. Tambi√©n, para inteligencia artificial, el manejo de datos categ√≥ricos es muy relevante. Muchas veces el transformar datos cont√≠nuos en factores ayuda a mejorar el desempe√±o de los modelos predictivos y es parte del feature engineering, uno de los pasos b√°sicos previos antes del desarrollo de cualquier modelo de inteligencia artificial."
  },
  {
    "objectID": "posts/factores-en-r/index.html#carga-de-datos",
    "href": "posts/factores-en-r/index.html#carga-de-datos",
    "title": "Factores en R",
    "section": "Carga de datos",
    "text": "Carga de datos\nOk. Ya tenemos claro que, al analizar datos, debemos conocer m√©todos para trabajar con categor√≠as o factores.\nPara ello, R y su framework tidyverse nos ofrece forcats. Una librer√≠a especializada en el manejo de factores. Te recomiendo que revises la documentaci√≥n oficial del la librer√≠a.\nAhora revisaremos muchas de sus funciones y que te ser√°n de gran utilidad en el d√≠a a d√≠a.\nPara los ejemplos usar√© estos datos disponibles en Kaggle.\nPrimero cargamos las librer√≠as que usaremos:\n\nlibrary(tidyverse)\nlibrary(here)\nlibrary(janitor)\n\nVeamos un poco los datos‚Ä¶\n\nhere::i_am(\"index.qmd\")\nsuicides <- read_csv2(\"master.csv\") |> \n  clean_names()\n\n\nglimpse(suicides)\n\nRows: 27,820\nColumns: 12\n$ country           <chr> \"Albania\", \"Albania\", \"Albania\", \"Albania\", \"Albania‚Ä¶\n$ year              <dbl> 1987, 1987, 1987, 1987, 1987, 1987, 1987, 1987, 1987‚Ä¶\n$ sex               <chr> \"male\", \"male\", \"female\", \"male\", \"male\", \"female\", ‚Ä¶\n$ age               <chr> \"15-24 years\", \"35-54 years\", \"15-24 years\", \"75+ ye‚Ä¶\n$ suicides_no       <dbl> 21, 16, 14, 1, 9, 1, 6, 4, 1, 0, 0, 0, 2, 17, 1, 14,‚Ä¶\n$ population        <dbl> 312900, 308000, 289700, 21800, 274300, 35600, 278800‚Ä¶\n$ suicides_100k_pop <chr> \"6.71\", \"5.19\", \"4.83\", \"4.59\", \"3.28\", \"2.81\", \"2.1‚Ä¶\n$ country_year      <chr> \"Albania1987\", \"Albania1987\", \"Albania1987\", \"Albani‚Ä¶\n$ hdi_for_year      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, ‚Ä¶\n$ gdp_for_year      <chr> \"2,156,624,900\", \"2,156,624,900\", \"2,156,624,900\", \"‚Ä¶\n$ gdp_per_capita    <dbl> 796, 796, 796, 796, 796, 796, 796, 796, 796, 796, 79‚Ä¶\n$ generation        <chr> \"Generation X\", \"Silent\", \"Generation X\", \"G.I. Gene‚Ä¶\n\n\n\nhead(suicides)\n\n# A tibble: 6 √ó 12\n  country  year sex    age       suici‚Ä¶¬π popul‚Ä¶¬≤ suici‚Ä¶¬≥ count‚Ä¶‚Å¥ hdi_f‚Ä¶‚Åµ gdp_f‚Ä¶‚Å∂\n  <chr>   <dbl> <chr>  <chr>       <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>  \n1 Albania  1987 male   15-24 ye‚Ä¶      21  312900 6.71    Albani‚Ä¶ <NA>    2,156,‚Ä¶\n2 Albania  1987 male   35-54 ye‚Ä¶      16  308000 5.19    Albani‚Ä¶ <NA>    2,156,‚Ä¶\n3 Albania  1987 female 15-24 ye‚Ä¶      14  289700 4.83    Albani‚Ä¶ <NA>    2,156,‚Ä¶\n4 Albania  1987 male   75+ years       1   21800 4.59    Albani‚Ä¶ <NA>    2,156,‚Ä¶\n5 Albania  1987 male   25-34 ye‚Ä¶       9  274300 3.28    Albani‚Ä¶ <NA>    2,156,‚Ä¶\n6 Albania  1987 female 75+ years       1   35600 2.81    Albani‚Ä¶ <NA>    2,156,‚Ä¶\n# ‚Ä¶ with 2 more variables: gdp_per_capita <dbl>, generation <chr>, and\n#   abbreviated variable names ¬π‚Äãsuicides_no, ¬≤‚Äãpopulation, ¬≥‚Äãsuicides_100k_pop,\n#   ‚Å¥‚Äãcountry_year, ‚Åµ‚Äãhdi_for_year, ‚Å∂‚Äãgdp_for_year"
  },
  {
    "objectID": "posts/factores-en-r/index.html#as_factor",
    "href": "posts/factores-en-r/index.html#as_factor",
    "title": "Factores en R",
    "section": "as_factor",
    "text": "as_factor\nEn este art√≠culo no realizaremos an√°lisis estad√≠sticos pensando en modelos de inteligencia artificial, que es lo cl√°sico que se realiza en Kaggle. Sino que veremos el uso de la librer√≠a forcats.\nRevisemos la variable age del dataset.\nEsta variable est√° definida como string. Es decir, como una cadena de caracteres.\n\nstr(suicides$age)\n\n chr [1:27820] \"15-24 years\" \"35-54 years\" \"15-24 years\" \"75+ years\" ...\n\n\nSi queremos realizar an√°lisis de este dataset, el tener esta variable como string no es buena idea. Parece m√°s razonable transformarlo a un factor. La librer√≠a forcats contiene la funci√≥n as_factor() que nos permite hacer eso.\n\nsuicides <- suicides |> \n  mutate(age = as_factor(age))\n\nVeamos nuevamente la estructura de la variable.\n\nstr(suicides$age)\n\n Factor w/ 6 levels \"15-24 years\",..: 1 2 1 3 4 3 2 4 5 6 ...\n\n\nOk. Ahora la variable ya no es de tipo string, sino que la hemos cambiado a tipo factor con 6 niveles. Es decir, tiene 6 categor√≠as. Ve√°moslas‚Ä¶\n\nlevels(suicides$age)\n\n[1] \"15-24 years\" \"35-54 years\" \"75+ years\"   \"25-34 years\" \"55-74 years\"\n[6] \"5-14 years\""
  },
  {
    "objectID": "posts/factores-en-r/index.html#fct_relevel",
    "href": "posts/factores-en-r/index.html#fct_relevel",
    "title": "Factores en R",
    "section": "fct_relevel",
    "text": "fct_relevel\nSi te fijas bien, el orden de las categor√≠as no est√° bien. Me refiero a que no sigue un orden ascendente o descendente, sino que est√° desordenado. Pues bien, podemos reordenarlos usando la funci√≥n fct_relevel().\n\nsuicides <- suicides |>\n  mutate(age = fct_relevel(age,\n                           \"5-14 years\",\n                           \"15-24 years\",\n                           \"25-34 years\",\n                           \"35-54 years\",\n                           \"55-74 years\",\n                           \"75+ years\"\n  ))\n\nlevels(suicides$age)\n\n[1] \"5-14 years\"  \"15-24 years\" \"25-34 years\" \"35-54 years\" \"55-74 years\"\n[6] \"75+ years\"  \n\n\nPara efectos demostrativos, usar√© el argumento after de fct_relevel() para reordenar una categor√≠a.\nAc√° har√© que ‚Äú5-14 years‚Äù quede despu√©s del √≠ndice 1 (recuerda que en R, el √≠ndice parte en 1).\n\nsuicides <- suicides |> \n  mutate(age = fct_relevel(age, \"5-14 years\", after = 1))\n\nlevels(suicides$age)\n\n[1] \"15-24 years\" \"5-14 years\"  \"25-34 years\" \"35-54 years\" \"55-74 years\"\n[6] \"75+ years\"  \n\n\nVolver√© a ordenarlo de forma correcta‚Ä¶\n\nsuicides <- suicides |> \n  mutate(age = fct_relevel(age, \"5-14 years\", after = 0))\n\nlevels(suicides$age)\n\n[1] \"5-14 years\"  \"15-24 years\" \"25-34 years\" \"35-54 years\" \"55-74 years\"\n[6] \"75+ years\""
  },
  {
    "objectID": "posts/factores-en-r/index.html#fct_reorder",
    "href": "posts/factores-en-r/index.html#fct_reorder",
    "title": "Factores en R",
    "section": "fct_reorder",
    "text": "fct_reorder\nEsta funci√≥n es muy √∫til para los gr√°ficos, ya que permite reordenar los factores de modo de ajustarlos a nuestros requerimientos y necesidades de la visualizaci√≥n.\nRealicemos un gr√°fico para Chile:\n\nsuicides |>\n  filter(\n    year == 2015,\n    country == \"Chile\"\n  ) |>\n  group_by(age) |>\n  summarise(suicides_total = sum(suicides_no)) |>\n  mutate(prop = suicides_total / sum(suicides_total)) |>\n  ggplot(aes(age, suicides_total,\n    fill = suicides_total\n  )) +\n  geom_col(show.legend = FALSE) +\n  labs(\n    title = \"Suicides in Chile\", subtitle = \"Year 2015\", y = \"Total Number of Suicides\",\n    x = \"Age\", fill = \"Number of Suicides\"\n  ) +\n  coord_flip() +\n  theme_minimal()\n\n\n\n\nEste gr√°fico est√° adecuado. Es informativo para saber cu√°l es el grupo etario que presenta m√°s suicidios. F√≠jate que el eje y est√° ordenado por las categor√≠as de age. Pero quiz√°s sea m√°s interesante ordenar los datos por el total de suicidios por grupo.\nVeamos c√≥mo hacerlo usando fct_reorder.\n\nsuicides |>\n  filter(\n    year == 2015,\n    country == \"Chile\"\n  ) |>\n  group_by(age) |>\n  summarise(suicides_total = sum(suicides_no)) |>\n  mutate(prop = suicides_total / sum(suicides_total)) |>\n  ggplot(aes(fct_reorder(age, suicides_total), suicides_total,\n    fill = suicides_total\n  )) +\n  geom_col(show.legend = FALSE) +\n  labs(title = \"Suicides in Chile\", subtitle = \"Year 2015\", y = \"Total Number of Suicides\", x = \"Age\", fill = \"Number of Suicides\") +\n  coord_flip() +\n  theme_minimal()\n\n\n\n\nEste orden deja m√°s claro la cantidad de suicidios por grupo etario y la proporci√≥n entre cada uno, a diferencia del gr√°fico anterior. F√≠jate en d√≥nde us√© fct_reorder. Podemos leerlo que deseamos que el eje x (primer par√°metro de aes) que corresponde a age, sea ordenado por suicides_total. Esto por defecto se ordena de mayor a menor (orden ascendente). Si deseamos hacerlo en orden descendente, debemos agregar el argumento .desc = TRUE al interior de fct_reoder.\n\nsuicides |>\n  filter(\n    year == 2015,\n    country == \"Chile\"\n  ) |>\n  group_by(age) |>\n  summarise(suicides_total = sum(suicides_no)) |>\n  mutate(prop = suicides_total / sum(suicides_total)) |>\n  ggplot(aes(fct_reorder(age, suicides_total, .desc = TRUE), suicides_total,\n    fill = suicides_total\n  )) +\n  geom_col(show.legend = FALSE) +\n  labs(title = \"Suicides in Chile\", subtitle = \"Year 2015\", y = \"Total Number of Suicides\", x = \"Age\", fill = \"Number of Suicides\") +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "posts/factores-en-r/index.html#fct_explicit_na",
    "href": "posts/factores-en-r/index.html#fct_explicit_na",
    "title": "Factores en R",
    "section": "fct_explicit_na",
    "text": "fct_explicit_na\nPara explicar esta funcion, vamos a usar la variable hdi_for_year (Human Development Index) que contiene datos NA.\nCreamos algunas categor√≠as:\n\nsuicides <- suicides |>\n  mutate(\n    hdi_cat = case_when(\n      hdi_for_year >= 0.80 ~ \"Very High Development\",\n      hdi_for_year >= 0.70 ~ \"High Development\",\n      hdi_for_year >= 0.55 ~ \"Medium Development\",\n      hdi_for_year >= 0.35 ~ \"Low Development\",\n      hdi_for_year < 0.35 ~ \"Very Low Development\"\n    ),\n    hdi_cat = as_factor(hdi_cat)\n  )\n\nYa sabemos que la variable hdi_for_year tiene datos NA, por lo que la nueva variable que acabamos de crear tambi√©n deber√≠a tener datos NA¬¥s.\n\nsum(is.na(suicides$hdi_cat))\n\n[1] 19456\n\n\nPara trabajar con los datos, tenerlos como NA podr√≠a complicar los an√°lisis y algunas funciones aritm√©ticas no funcionar√≠an o ser√≠a m√°s dificil de interpretar.\n\nsuicides |>\n  filter(country == \"Chile\") |>\n  group_by(country, hdi_cat) |>\n  summarise(n = n())\n\n# A tibble: 4 √ó 3\n# Groups:   country [1]\n  country hdi_cat                   n\n  <chr>   <fct>                 <int>\n1 Chile   Medium Development       24\n2 Chile   High Development         36\n3 Chile   Very High Development    60\n4 Chile   <NA>                    252\n\n\nUna opci√≥n es usar fct_explicit_na para identificar los NA¬¥s y asignarle un valor a esa categor√≠a. Esto hace m√°s legible las tablas y los an√°lisis.\n\nsuicides <- suicides |>\n  mutate(hdi_cat = fct_explicit_na(hdi_cat, na_level = \"Missing\"))\n\nsuicides |>\n  filter(country == \"Chile\") |>\n  group_by(country, hdi_cat) |>\n  summarise(n = n())\n\n# A tibble: 4 √ó 3\n# Groups:   country [1]\n  country hdi_cat                   n\n  <chr>   <fct>                 <int>\n1 Chile   Medium Development       24\n2 Chile   High Development         36\n3 Chile   Very High Development    60\n4 Chile   Missing                 252"
  },
  {
    "objectID": "posts/factores-en-r/index.html#section",
    "href": "posts/factores-en-r/index.html#section",
    "title": "Factores en R",
    "section": "",
    "text": "fct_lump\nPodemos agrupar categor√≠as, seg√∫n necesidad. Retomemos la variable que creamos hdi_cat.\nOmitimos los datos NA¬¥s, mantenemos las 2 categor√≠as con mayor cantidad de datos y el resto las agrupamos en una nueva categor√≠a ‚ÄúAverage/Low Development‚Äù usando el argumento other_level.\n\nsuicides |>\n  na.omit() |>\n  mutate(hdi_lumped = fct_lump(hdi_cat, n = 2, other_level = \"Average/Low Development\")) |>\n  count(hdi_lumped) |>\n  mutate(prop = n / sum(n)) |>\n  arrange(desc(n))\n\n# A tibble: 3 √ó 3\n  hdi_lumped                  n  prop\n  <fct>                   <int> <dbl>\n1 Very High Development    3600 0.430\n2 High Development         2952 0.353\n3 Average/Low Development  1812 0.217\n\n\nAcabamos de mantener las 2 categor√≠as con m√°s datos ( n = 2), pero tamb√©n podemos usar una proporci√≥n para hacer esa segmentaci√≥n. Para ello, usamos el argumento prop.\nVeamos un ejemplo‚Ä¶\n\nsuicides |>\n  na.omit() |>\n  mutate(hdi_relevel = fct_lump(hdi_cat, prop = 0.2, other_level = \"Below Average\")) |>\n  count(hdi_relevel) |>\n  mutate(prop = round(n / sum(n), 3))\n\n# A tibble: 4 √ó 3\n  hdi_relevel               n  prop\n  <fct>                 <int> <dbl>\n1 Medium Development     1752 0.209\n2 High Development       2952 0.353\n3 Very High Development  3600 0.43 \n4 Below Average            60 0.007\n\n\nUsamos prop = 0.20 para indicar que cualquier categor√≠a con 20% o menos se indica como ‚ÄúBelow Average‚Äù."
  },
  {
    "objectID": "posts/factores-en-r/index.html#fct_infreq",
    "href": "posts/factores-en-r/index.html#fct_infreq",
    "title": "Factores en R",
    "section": "fct_infreq",
    "text": "fct_infreq\nEsta funci√≥n se usa junto a la librer√≠a ggplot2. Por ejemplo, para una gr√°fica de conteo de datos, esta funci√≥n permite ordenar por frecuencia.\nPrimero veamos sin usarla y luego us√°ndola.\n\nsuicides |> \n  na.omit() |> \n  add_count(hdi_cat) |> \n  ggplot(aes(hdi_cat)) +\n  geom_bar(stat = \"count\") +\n  labs(x = \"HDI Level\", y = \"Count\") +\n  theme_minimal() \n\n\n\n\n\nlevels(suicides$hdi_cat)\n\n[1] \"Medium Development\"    \"High Development\"      \"Very High Development\"\n[4] \"Low Development\"       \"Missing\"              \n\n\nComo te dar√°s cuenta, el gr√°fico anterior est√° ordenado por los niveles de las categor√≠as de hdi_cat ( y que no est√° ordenado adem√°s). Podemos usar fct_infreq para order las categor√≠as por frecuencia (por defecto, lo hace en orden descendente).\n\nsuicides |> \n  na.omit() |> \n  add_count(hdi_cat) |> \n  ggplot(aes(fct_infreq(hdi_cat))) +\n  geom_bar(stat = \"count\") +\n  labs(x = \"HDI Level\", y = \"Count\") +\n  theme_minimal()"
  },
  {
    "objectID": "posts/factores-en-r/index.html#fct_rev",
    "href": "posts/factores-en-r/index.html#fct_rev",
    "title": "Factores en R",
    "section": "fct_rev",
    "text": "fct_rev\nPodemos hacer lo mismo anterior, pero ordenarlos en forma ascendente. Para ellos usamos fct_rev.\n\nsuicides |> \n  na.omit() |> \n  add_count(hdi_cat) |> \n  ggplot(aes(fct_rev(fct_infreq(hdi_cat)))) +\n  geom_bar(stat = \"count\") +\n  labs(x = \"HDI Level\", y = \"Count\") +\n  theme_minimal()"
  },
  {
    "objectID": "posts/factores-en-r/index.html#fct_count",
    "href": "posts/factores-en-r/index.html#fct_count",
    "title": "Factores en R",
    "section": "fct_count",
    "text": "fct_count\nEsta funci√≥n nos permite contar los datos por cada nivel de las categor√≠as.\n\nfct_count(suicides$hdi_cat)\n\n# A tibble: 5 √ó 2\n  f                         n\n  <fct>                 <int>\n1 Medium Development     1752\n2 High Development       2952\n3 Very High Development  3600\n4 Low Development          60\n5 Missing               19456\n\n\nEsta funci√≥n reemplaza lo que podemos hacer con la combinaci√≥n de group_by y summarise. Es lo mismo, pero con menos l√≠neas de c√≥digo. Esto podr√≠a ser √∫til en algunos casos para ser m√°s productivo, pero se pierde legibildad, pues hay que saber qu√© hace exactamente fct_count. En cambio, la combinaci√≥n de funciones es m√°s expl√≠cita. Queda a tu criterio de programador cual usar.\n\nsuicides |> \n  group_by(hdi_cat) |> \n  summarise(n = n())\n\n# A tibble: 5 √ó 2\n  hdi_cat                   n\n  <fct>                 <int>\n1 Medium Development     1752\n2 High Development       2952\n3 Very High Development  3600\n4 Low Development          60\n5 Missing               19456"
  },
  {
    "objectID": "posts/factores-en-r/index.html#fct_unique",
    "href": "posts/factores-en-r/index.html#fct_unique",
    "title": "Factores en R",
    "section": "fct_unique",
    "text": "fct_unique\nEsta funci√≥n es similar a unique de la base de R. O sea, muestra los valores √∫nicos de una variable.\n\nfct_unique(suicides$hdi_cat) \n\n[1] Medium Development    High Development      Very High Development\n[4] Low Development       Missing              \n5 Levels: Medium Development High Development ... Missing\n\n\n\nunique(suicides$hdi_cat)\n\n[1] Missing               Medium Development    High Development     \n[4] Very High Development Low Development      \n5 Levels: Medium Development High Development ... Missing"
  },
  {
    "objectID": "posts/factores-en-r/index.html#fct_collapse",
    "href": "posts/factores-en-r/index.html#fct_collapse",
    "title": "Factores en R",
    "section": "fct_collapse",
    "text": "fct_collapse\nEsta funci√≥n nos permite crear un factor a partir de otros. Es decir, colapsarlos en otro (o agruparlos).\nPara revisar esta funci√≥n, ahora usaremos la variable generation. Crearemos 2 nuevas variables que contienen distintas categor√≠as.\n\nsuicides |> \n  mutate(generation = as_factor(generation)) |> \n  mutate(generations = fct_collapse(generation,\n    \"Older Generations\" = c(\"Silent\", \"G.I. Generation\", \"Boomers\"),\n    \"Younger Generations\" = c(\"Generation X\", \"Generation Z\", \"Millenials\")\n  )) |> \n  pull(generations) |> \n  levels()\n\n[1] \"Younger Generations\" \"Older Generations\""
  },
  {
    "objectID": "posts/factores-en-r/index.html#fct_other",
    "href": "posts/factores-en-r/index.html#fct_other",
    "title": "Factores en R",
    "section": "fct_other",
    "text": "fct_other\nEsta funci√≥n permite agrupar niveles, para compararlo con uno en especial. Para definir la categor√≠a que queremos mentener usamos el argumento keep y el resto se agrupa en other.\n\nsuicides |> \n  mutate(silent_against_other = fct_other(generation, keep = \"Silent\")) |> \n  pull(silent_against_other) |> \n  levels()\n\n[1] \"Silent\" \"Other\""
  },
  {
    "objectID": "posts/factores-en-r/index.html#fct_recode",
    "href": "posts/factores-en-r/index.html#fct_recode",
    "title": "Factores en R",
    "section": "fct_recode",
    "text": "fct_recode\nEsta funci√≥n permite recodificar un nivel. Es decir, asignarle un nuevo nombre a una categor√≠a. Esto tiene varias posibilidades, como hacer m√°s entendible una variable.\n\nsuicides |> \n  mutate(age_levels = fct_recode(age,\n                                 \"Child\" = \"5-14 years\",\n                                 \"Adolescent/Young Adult\"= \"15-24 years\",\n                                 \"Adult\" = \"25-34 years\",\n                                 \"Middle-Aged Adult\"= \"35-54 years\",\n                                 \"Older Adult\" = \"55-74 years\",\n                                 \"Senior\" = \"75+ years\")) |> \n  pull(age_levels) |> \n  levels()\n\n[1] \"Child\"                  \"Adolescent/Young Adult\" \"Adult\"                 \n[4] \"Middle-Aged Adult\"      \"Older Adult\"            \"Senior\""
  },
  {
    "objectID": "posts/factores-en-r/index.html#fct_reorder2",
    "href": "posts/factores-en-r/index.html#fct_reorder2",
    "title": "Factores en R",
    "section": "fct_reorder2",
    "text": "fct_reorder2\nEsta funci√≥n se aplica para los gr√°ficos, junto a ggplot2. Lo que hace es reordenar los valores en base a un atributo.\n\nsuicides |> \n  filter(country == \"Chile\") |> \n  group_by(year, age) |> \n  summarise(suicides_total = sum(suicides_no)) |> \n  ggplot(aes(year, suicides_total, colour = fct_reorder2(age, year, suicides_total))) +\n  geom_line(size = 2) + \n  labs(title = \"Suicides in Chile\",\n       y = \"Total Number of Suicides\",\n       x = \"Year\", colour = \"Age\") +\n  theme_minimal()\n\n\n\n\nMira lo que pasa si no usamos fct_reorder2. Las l√≠neas de la gr√°fica son las mismas obviamente, pero la leyenda cambia y los colores de √©stas tambi√©n. La leyenda aparece en el orden de las categor√≠as que ordenamos antes, pero en el gr√°fco anterior, se ordenan en base al √∫ltimo valor y por tanto, la leyenda coincide con el orden de las lineas. Eso hace que sea m√°s legible y f√°cil de interpretar.\n\nsuicides |> \n  filter(country == \"Chile\") |> \n  group_by(year, age) |> \n  summarise(suicides_total = sum(suicides_no)) |> \n  ggplot(aes(year, suicides_total, colour = age)) +\n  geom_line(size = 2) + \n  labs(title = \"Suicides in Chile\",\n       y = \"Total Number of Suicides\",\n       x = \"Year\", colour = \"Age\") +\n  theme_minimal()"
  },
  {
    "objectID": "posts/factores-en-r/index.html#fct_relabel",
    "href": "posts/factores-en-r/index.html#fct_relabel",
    "title": "Factores en R",
    "section": "fct_relabel",
    "text": "fct_relabel\nEsta funci√≥n permite modificar el nombre de los niveles.\n\nsuicides$age |> \n  fct_relabel(~ str_replace_all(.x, \"years\", \" \")) |> \n  head()\n\n[1] 15-24   35-54   15-24   75+     25-34   75+    \nLevels: 5-14   15-24   25-34   35-54   55-74   75+"
  },
  {
    "objectID": "posts/factores-en-r/index.html#fct_anon",
    "href": "posts/factores-en-r/index.html#fct_anon",
    "title": "Factores en R",
    "section": "fct_anon",
    "text": "fct_anon\nEsta funci√≥n permite anonimizar una variable categ√≥rica.\n\nsuicides |> \n  mutate(generation = as_factor(generation) |> \n  fct_anon()) |> \n  group_by(generation) |> \n  count()\n\n# A tibble: 6 √ó 2\n# Groups:   generation [6]\n  generation     n\n  <fct>      <int>\n1 1           6408\n2 2           2744\n3 3           1470\n4 4           5844\n5 5           4990\n6 6           6364\n\n\nSe puede agregar un prefijo a cada categor√≠a anonimizada:\n\nsuicides |> \n  mutate(generation = as_factor(generation) |> \n  fct_anon(\"x-\")) |> \n  group_by(generation) |> \n  count()\n\n# A tibble: 6 √ó 2\n# Groups:   generation [6]\n  generation     n\n  <fct>      <int>\n1 x-1         6408\n2 x-2         4990\n3 x-3         6364\n4 x-4         2744\n5 x-5         5844\n6 x-6         1470"
  },
  {
    "objectID": "posts/factores-en-r/index.html#finalmente",
    "href": "posts/factores-en-r/index.html#finalmente",
    "title": "Factores en R",
    "section": "Finalmente‚Ä¶",
    "text": "Finalmente‚Ä¶\nHemos revisado muchas de las funciones de la librer√≠a forcats, que como ves es bastante extensa. De hecho, no revisamos todas, hay varias m√°s, pero me parece que son muy espec√≠ficas y para casos muy puntuales. De todas formas, recuerda visitar la documentaci√≥n oficial para revisar m√°s detalles.\nComo puedes ver, el conocer alguna de estas funciones es de mucha utilidad para trabajar con datos categ√≥ricos. Y como siempre, recuerda practicar y practicar. No hay otra forma de que las cosas se te queden en la cabeza.\nNos vemos!!! üòÉ"
  }
]